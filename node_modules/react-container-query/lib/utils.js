"use strict";
var toPairs = require('lodash/toPairs');
function parsePixels(value) {
    if (/px$/.test(value)) {
        var _a = /(\d+(\.\d+)?)px$/.exec(value), digit = _a[1];
        return Number(digit);
    }
    if (process.env.NODE_ENV !== 'production') {
        console.log("current only pixel value height and width are supported, \"" + value + "\" is not a pixel value");
    }
    return null;
}
exports.parsePixels = parsePixels;
function parseQuery(query) {
    var rules = toPairs(query)
        .map(function (_a) {
        var selectorName = _a[0], _b = _a[1], minWidth = _b.minWidth, maxWidth = _b.maxWidth, minHeight = _b.minHeight, maxHeight = _b.maxHeight;
        return {
            selectorName: selectorName,
            minWidth: minWidth || 0,
            maxWidth: maxWidth || Infinity,
            minHeight: minHeight || 0,
            maxHeight: maxHeight || Infinity
        };
    });
    return function (dimension) {
        var width = dimension.width, height = dimension.height;
        if (width == null || height == null) {
            return {};
        }
        var selectorMap = {};
        for (var _i = 0, rules_1 = rules; _i < rules_1.length; _i++) {
            var _a = rules_1[_i], selectorName = _a.selectorName, minWidth = _a.minWidth, maxWidth = _a.maxWidth, minHeight = _a.minHeight, maxHeight = _a.maxHeight;
            selectorMap[selectorName] = (minWidth <= width &&
                width <= maxWidth &&
                minHeight <= height &&
                height <= maxHeight);
        }
        return selectorMap;
    };
}
exports.parseQuery = parseQuery;
//# sourceMappingURL=utils.js.map